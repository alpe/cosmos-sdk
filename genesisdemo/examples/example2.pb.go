// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: genesisdemo/examples/example2.proto

package examples

import (
	fmt "fmt"
	bar "github.com/cosmos/cosmos-sdk/genesisdemo/bar"
	foo "github.com/cosmos/cosmos-sdk/genesisdemo/foo"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AppGenesisState struct {
	Bar bar.GenesisState   `protobuf:"bytes,1,opt,name=bar,proto3" json:"bar"`
	Foo []foo.GenesisState `protobuf:"bytes,2,rep,name=foo,proto3" json:"foo"`
}

func (m *AppGenesisState) Reset()         { *m = AppGenesisState{} }
func (m *AppGenesisState) String() string { return proto.CompactTextString(m) }
func (*AppGenesisState) ProtoMessage()    {}
func (*AppGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8a232104ebf5ff3, []int{0}
}
func (m *AppGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppGenesisState.Merge(m, src)
}
func (m *AppGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *AppGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_AppGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_AppGenesisState proto.InternalMessageInfo

func (m *AppGenesisState) GetBar() bar.GenesisState {
	if m != nil {
		return m.Bar
	}
	return bar.GenesisState{}
}

func (m *AppGenesisState) GetFoo() []foo.GenesisState {
	if m != nil {
		return m.Foo
	}
	return nil
}

func init() {
	proto.RegisterType((*AppGenesisState)(nil), "examples.AppGenesisState")
}

func init() {
	proto.RegisterFile("genesisdemo/examples/example2.proto", fileDescriptor_d8a232104ebf5ff3)
}

var fileDescriptor_d8a232104ebf5ff3 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x4f, 0xcd, 0x4b,
	0x2d, 0xce, 0x2c, 0x4e, 0x49, 0xcd, 0xcd, 0xd7, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x2d,
	0x86, 0x31, 0x8c, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60, 0x12, 0x52, 0x6a, 0x25,
	0x19, 0x99, 0x45, 0x29, 0xf1, 0x05, 0x89, 0x45, 0x25, 0x95, 0xfa, 0x60, 0x49, 0xfd, 0xf4, 0xfc,
	0xf4, 0x7c, 0x04, 0x0b, 0xa2, 0x43, 0x4a, 0x1a, 0xd9, 0xd8, 0xa4, 0xc4, 0x22, 0xfd, 0x92, 0xca,
	0x82, 0xd4, 0x62, 0x6c, 0x92, 0x69, 0xf9, 0xf9, 0xc8, 0x92, 0x4a, 0xe9, 0x5c, 0xfc, 0x8e, 0x05,
	0x05, 0xee, 0x10, 0x15, 0xc1, 0x25, 0x89, 0x25, 0xa9, 0x42, 0x9a, 0x5c, 0xcc, 0x49, 0x89, 0x45,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x82, 0x7a, 0x49, 0x89, 0x45, 0x7a, 0xc8, 0xf2, 0x4e,
	0x2c, 0x27, 0xee, 0xc9, 0x33, 0x04, 0x81, 0xd4, 0x80, 0x94, 0xa6, 0xe5, 0xe7, 0x4b, 0x30, 0x29,
	0x30, 0x83, 0x95, 0xa6, 0xe5, 0xe7, 0x63, 0x55, 0x9a, 0x96, 0x9f, 0xef, 0xe4, 0x7d, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1,
	0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x86, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a,
	0xc9, 0xf9, 0xb9, 0xfa, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0x50, 0x4a, 0xb7, 0x38, 0x25, 0x5b,
	0x1f, 0x5b, 0x80, 0x25, 0xb1, 0x81, 0x1d, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xd7,
	0x2b, 0x98, 0x4f, 0x01, 0x00, 0x00,
}

func (m *AppGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Foo) > 0 {
		for iNdEx := len(m.Foo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Foo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExample2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Bar.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExample2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintExample2(dAtA []byte, offset int, v uint64) int {
	offset -= sovExample2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bar.Size()
	n += 1 + l + sovExample2(uint64(l))
	if len(m.Foo) > 0 {
		for _, e := range m.Foo {
			l = e.Size()
			n += 1 + l + sovExample2(uint64(l))
		}
	}
	return n
}

func sovExample2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExample2(x uint64) (n int) {
	return sovExample2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Foo = append(m.Foo, foo.GenesisState{})
			if err := m.Foo[len(m.Foo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExample2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExample2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExample2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExample2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExample2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExample2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExample2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExample2 = fmt.Errorf("proto: unexpected end of group")
)
